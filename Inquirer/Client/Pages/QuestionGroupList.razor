@inject IDataService DataService

<div>
    <table class="table table-striped table-hover">
        <thead class="thead-light">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Наименование</th>
                <th scope="col">Баллы</th>
                <th scope="col">Описание</th>
                <th>
                    @if (EditedItem is null && Model.Groups.Count < QuestionGroup.MaxCount)
                    {
                        <button class="btn btn-link" @onclick="AddNew">Создать</button>
                    }
                </th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Groups.Count == 0)
            {
                <tr>
                    <td colspan="5">
                        Нет данных
                    </td>
                </tr>
            }
            else
            {
                foreach (var item in Model.Groups.OrderBy(t => t.Number))
                {
                    <tr>
                        @if (EditedItem?.Id == item.Id)
                        {
                            <th scope="col">@item.Number</th>
                            <td>
                                <input type="text" class="form-control" @bind="EditedItem.Name" />
                            </td>
                            <td>
                                <input type="number" class="form-control" @bind="EditedItem.Score" />
                            </td>
                            <td>
                                <textarea class="form-control" @bind="EditedItem.Description" />
                            </td>
                            <td>
                                <button class="btn btn-link" @onclick="Save">Сохранить</button>
                                <button class="btn btn-link" @onclick="Cancel">Отмена</button>
                            </td>
                        }
                        else
                        {
                            <th scope="row">
                                @item.Number
                                @if (EditedItem is null)
                                {
                                    @if (Model.Groups.IndexOf(item) > 0)
                                    {
                                        <button class="btn btn-link oi oi-caret-top" @onclick="(async () => { await MoveUpAsync(item); })" />
                                    }
                                    @if (Model.Groups.IndexOf(item) < (Model.Groups.Count - 1))
                                    {
                                        <button class="btn btn-link oi oi-caret-bottom" @onclick="(async () => { await ModeDownAsync(item); })" />
                                    }
                                }
                            </th>
                            <td>@item.Name</td>
                            <td>@item.Score</td>
                            <td>@item.Description</td>
                            <td>
                                @if (EditedItem is null)
                                {
                                    <button class="btn btn-link" @onclick="() => Edit(item)">Изменить</button>
                                    <button class="btn btn-link" @onclick="(async () => { await DeleteAsync(item); })">Удалить</button>
                                }
                            </td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@code {
    [Parameter]
    public QuestionnaireForm ParentComponent { get; set; }
    public Questionnaire Model => ParentComponent.Model;

    private QuestionGroup EditedItem { get; set; }

    private void AddNew()
    {
        Model.Groups.Add(EditedItem = new QuestionGroup
        {
            QuestionnaireId = Model.Id,
            Number = Model.Groups.Count == 0 ? 1 : Model.Groups.Max(t => t.Number) + 1
        });
    }
    private void Edit(QuestionGroup item)
    {
        EditedItem = item;
    }
    private async Task DeleteAsync(QuestionGroup item)
    {
        await DataService.Delete<QuestionGroup>(item.Id);
        Model.Groups.Remove(item);
        ParentComponent.Refresh();
    }
    private async Task Save()
    {
        if (EditedItem.IsNew)
        {
            var savedItem = await DataService.AddNew(EditedItem);
            EditedItem.Id = savedItem.Id;
            ParentComponent.Refresh();
        }
        else
        {
            await DataService.Update(EditedItem);
        }
        EditedItem = null;
    }
    private void Cancel()
    {
        if (EditedItem.Id == 0)
        {
            Model.Groups.Remove(EditedItem);
        }
        EditedItem = null;
    }
    private async Task MoveUpAsync(QuestionGroup item)
    {
        int index = Model.Groups.IndexOf(item);
        QuestionGroup entity1 = Model.Groups[index - 1];
        await DataService.Swap(entity1, item);
    }
    private async Task ModeDownAsync(QuestionGroup item)
    {
        int index = Model.Groups.IndexOf(item);
        QuestionGroup entity2 = Model.Groups[index + 1];
        await DataService.Swap(item, entity2);
    }
}